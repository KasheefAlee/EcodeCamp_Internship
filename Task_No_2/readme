Introduction
This report outlines the development of a web application designed for stock price prediction using a Long Short-Term Memory (LSTM) model. The application leverages Flask, a micro web framework for Python, to provide users with an interactive interface for predicting stock prices based on historical data. The project aims to enhance user engagement with financial data and provide insights into stock market trends.
Project Overview
The primary objective of this project was to create a user-friendly web application that allows users to input stock ticker symbols and receive predictions for future stock prices. The application utilizes a pre-trained LSTM model, which is capable of analyzing time-series data to forecast stock prices based on historical trends.
Key Components
Flask Framework: The application is built using Flask, which facilitates the creation of web applications in Python. Flask's simplicity and flexibility make it an ideal choice for this project.
LSTM Model: The core of the prediction functionality is an LSTM model, which has been trained on historical stock price data. This model is loaded into the application using Keras, a high-level neural networks API.
Data Retrieval: The application fetches historical stock data using the yfinance library, which allows for easy access to financial data from Yahoo Finance.
User Interface: The front end of the application is designed using HTML and CSS, providing a clean and intuitive interface for users to interact with.
Implementation Details
Backend (app.py)
The backend of the application is implemented in the app.py file, which includes the following functionalities:
Model Loading: The LSTM model is loaded from a specified path, allowing the application to utilize the pre-trained model for predictions.
Data Processing: Upon receiving a stock ticker symbol from the user, the application retrieves the last 60 days of stock data, preprocesses it using MinMaxScaler, and reshapes it for input into the LSTM model.
Prediction Logic: The application makes predictions based on the processed data and returns the predicted stock price to the user.
Frontend (index.html)
The frontend is implemented in the index.html file, which includes:
Form for User Input: A simple form allows users to enter stock ticker symbols. Input validation is performed using JavaScript to ensure that only valid symbols are submitted.
Dynamic Background: The application features a visually appealing background image, enhancing the user experience.
Result Display: The predicted stock price is displayed on the same page after submission, providing immediate feedback to the user.
Styling (style.css)
Although the style.css file is currently empty, it can be utilized in the future to enhance the visual aesthetics of the application further. The inline styles in index.html provide a basic design, but external styles can be added for more complex layouts and responsive design.
Challenges and Solutions
During the development of this application, several challenges were encountered:
Data Retrieval Issues: Initially, there were difficulties in fetching stock data due to incorrect ticker symbols. This was resolved by implementing error handling to inform users when no data is found for a given ticker.
Background Image Loading: The background image did not display correctly due to an absolute file path. This was fixed by using Flask's url_for function to reference static files properly.
Model Performance: Ensuring the LSTM model provided accurate predictions required careful preprocessing of the input data. This was addressed by implementing a robust data scaling and reshaping process.
Conclusion
The stock price prediction web application successfully integrates machine learning with a user-friendly interface, allowing users to predict stock prices based on historical data. The project demonstrates the potential of using LSTM models for financial forecasting and provides a foundation for further enhancements, such as adding more features, improving the model's accuracy, and expanding the user interface. Future work may include implementing additional data visualization tools and expanding the application to support multiple stock predictions simultaneously.
